<!-- -*- mode: markdown -*- -->
# Overview

UFDS is the "unified foundational directory service" built for SDC over
[ldapjs](http://ldapjs.org) and [Riak](https://github.com/mcavage/node-ldapjs-riak),
and is used to track accounts, credentials, and more. It is a superset of
functionality offered by previous SDC versions employing CAPI (there is a
backwards compatible "shim" that offers the same API as CAPI did in SDC 6.5).

# DIT

## Hierarchy

The directory tree is laid out as follows:

    o=smartdc
      +-ou=customers
      |  +-login=:login
      |  | +-key=:name
      |  | +-ou=users
      |  | | +-login=:login
      |  | | | +-key=:name
      |  | | | +-metadata=:appkey
      |  | | | +-dclimit=:datacenter
      +-ou=operators
      |  +-login=:login
      |  | +-key=:name

We could maintain a static group of operators in the tree, rather than
separating it out.  However, then there is a burden to keep the tree and that
group in sync (since "dynamic" LDAP groups are not yet supported).

## Schema

All schema for UFDS is located in the `./schema` directory, and is modeled in
JSON schema; while JSON schema is far from perfect, it's not terrible, and is a
big usability improvement over "standard" LDAP schema.  Reference that directory
for an up to date listing of schema, but basically, operators/customers are an
instance of the `sdcperson` objectclass, then the other entities are for
credentials et al hung off a 'user'.  Typically, we use JSON schema in a manner
where the set of attributes defined are required, but the object is left "open"
so that administrators et al can tack on additional attributes without worrying
about the schema.

## Indexing

UFDS supports indexes and unique indexes.  Indexes are fairly cheap, so it's
advantageous to index a lot of fields, really.  Unique indexes however, are
extremely costly, so we only really want to set those where you really
need them (notably login and email, since we're assuming we can generate
uuid's without collision).

Indexing is configured in config.json, and leverages Riak's `2i` code.

## Searching

While UFDS supports pretty much all LDAP search filters and operations, you
almost certainly don't want to use something like `objectclass=*` outside of a
development environment.  You pretty much want to stick to equality filters
on indexes (although, `&` filters where not all of the equality filters are
indexed is ok).  For example, this would be ok:

    `alias lsearch='ldapsearch -LLL -x -D cn=root -w secret -b o=smartdc'`

    `lsearch "(&(objectclass=sdcperson)(email=foo@joyent.com))"`

While this would be a poor performing filter:

    `lsearch "(|(objectclass=sdcperson)(_ctime>=2010-01-01:T00:00:00))"`

# Development

## Riak

You need a 1.0.x version of Riak.  As of this writing, they are still in release
candidate(s) for 1.0, but you can grab one here:
<http://downloads.basho.com/riak/riak-1.0.0rc1>.

Once you have that, you need to be on the leveldb backend, so crack open
`riak-1.0.0rc1/etc/app.config` and under the section `{riak_kv`, change the
key `storage_backend` to `riak_kv_eleveldb_backend` (it will probably be set
to bitcask).  Once you have that, you also need to increase your ulimits:
`ulimit -n 2048`, and I just run from a local shell: `./bin/riak start`. If you
want to clean out/reset your data:
`./bin/riak stop && rm -fr data/leveldb/* && ./bin/riak start`

Note that UFDS heavily leverages riak secondary indexing, which isn't really
documented yet, save here: <https://gist.github.com/d66f8298802e4ae28e95>.

## UFDS

Next you need to start UFDS, which is the LDAP interface over riak.  Config
for this is stored in `./cfg/config.json`, but assuming you're running localhost
riak, you should be good to go with: `node main.js -f cfg/config.json -d 2`;
note the `-d 2` is optional, but will spew diagnostic logs for you, which is
helpful if you're developing.

### Bootstrapping

Once you have riak+ufds running, you need to 'bootstrap' the LDAP tree. There's
a small LDIF file that has what you need, so just run this:

    `ldapadd -H ldap://localhost:1389 -x -D cn=root -w secret -f data/bootstrap.ldif`

Note that if using SSL, OpenSSL requires the following env var to turn
off certificate checking: `LDAPTLS_REQCERT=allow`.


## CAPI

To maintain backwards compatibility, there is a restify app that "approximates"
the old CAPI interface. It assumes that UFDS is running on the same host, so to
fire it up, just run `node capi.js -p 8080 -d 2`.

To make curl'ing the CAPI thing easier, I have a small bash function:

    function capi() {
        /usr/bin/curl -is -H 'Accept: application/json' -H 'content-type: application/xml' -u admin:tot@ls3crit --url http://localhost:8080$@ ;
        echo "";
    }

### Adding/Updating/Listing/Deleteing Customers

Edit the file to your heart's content and POST to add:

`capi /customers -d @/Users/mark/work/ufds/data/capi_customer.xml`

Update with:

`capi /customers/03afb9ac-925c-4e39-9ec2-ddbb2df9ef7d -d @/Users/mark/work/ufds/data/update_customer.xml -X PUT`

Get with:

`capi /customers/03afb9ac-925c-4e39-9ec2-ddbb2df9ef7d`

List/Search with:

`capi /customers`
`capi /customers?email_address=%40joyent.com`

Delete with:

`capi /customers/03afb9ac-925c-4e39-9ec2-ddbb2df9ef7d -X DELETE`

### SSH keys

Add (can't use fn(), as content-type is different):
`/usr/bin/curl -is http://localhost:8080/customers/03afb9ac-925c-4e39-9ec2-ddbb2df9ef7d/keys --data-urlencode key@/Users/mark/.ssh/id_rsa.pub -d name=id_rsa`

List:

`capi /customers/9c664a75-b638-4bc6-9213-9cda22f8f2d9/keys`

Rename:

`capi /customers/9c664a75-b638-4bc6-9213-9cda22f8f2d9/keys/7bc05cd69e110c76044b03c911f2727f?name=foo -X PUT`

Delete:

`capi /customers/9c664a75-b638-4bc6-9213-9cda22f8f2d9/keys/7bc05cd69e110c76044b03c911f2727f -X DELETE`

## Raw LDAP

Preferably though, you're going to use LDAP directly, as it's more powerful than
the CAPI shim.  Here's some stuff to get you going.

`alias lsearch='ldapsearch -H ldap://localhost:1389 -x -LLL -D cn=root -w secret -b o=smartdc'`
`alias ladd='ldapadd -H ldap://localhost:1389 -x -D cn=root -w secret -f'`
`alias ldelete='ldapdelete -H ldap://localhost:1389 -x -D cn=root -w secret'`
`alias lmodify='ldapmodify -H ldap://localhost:1389 -x -D cn=root -w secret -f'`

### Searches

Not everything here is really suitable for production, as the `objectclass=`
searches are not hitting indexes.  I marked these for note.

Everything (N/A):

`lsearch objectclass=*`

Customers (N/A):

`lsearch -b ou=customers,o=smartdc objectclass=sdcperson`

Customer by login:

`lsearch -b ou=customers,o=smartdc login=mark`

Keys for a customer:

`lsearch -b uuid=9c664a75-b638-4bc6-9213-9cda22f8f2d9,ou=customers,o=smartdc fingerprint=*`

Operators (N/A):

`lsearch -b ou=operators,o=smartdc objectclass=sdcperson`


