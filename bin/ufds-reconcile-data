#!/usr/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

# vi: expandtab sw=4 ts=4
#
# Bootstrap ufds data and/or migrate data from the local UFDS to a remote UFDS.
# This script can be run at any time, safely and idempotently.
#
# If the script indicates that it won't sync, but you (the operator) know that
# it must be done, you can force a reconciliation with:
# FORCE_RECONCILE=1 ...
#
# TODO: We probably need to hard-code a version in here (or do something
#       similar) so that new entries to the bootstrapped data will automatically
#       be picked up.
#

if [[ -n "$TRACE" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

if [[ -z "$FORCE_RECONCILE" ]]; then
    FORCE_RECONCILE=0
fi



#---- globals, config

source /opt/smartdc/boot/lib/util.sh
PATH=/opt/smartdc/ufds/build/node/bin:/opt/smartdc/ufds/node_modules/.bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin
role=ufds
SVC_ROOT="/opt/smartdc/$role"
BOOTSTRAP_LDIF_IN="${SVC_ROOT}/data/bootstrap.ldif.in"
BOOTSTRAP_REMOTE_LDIF_IN="${SVC_ROOT}/data/bootstrap_remote.ldif.in"
LDIF_PREFIX="/tmp/"
X=0



#---- functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}


function setup_vars {
    #From util.sh
    download_metadata

    UFDS_ADMIN_IP=127.0.0.1
    UFDS_LDAP_ROOT_DN=$(json -f ${METADATA} ufds_ldap_root_dn)
    UFDS_LDAP_ROOT_PW=$(json -f ${METADATA} ufds_ldap_root_pw)

    UFDS_ADMIN_UUID=$(json -f ${METADATA} ufds_admin_uuid)
    UFDS_ADMIN_LOGIN=$(json -f ${METADATA} ufds_admin_login)
    UFDS_ADMIN_PW=$(json -f ${METADATA} ufds_admin_pw)
    UFDS_ADMIN_EMAIL=$(json -f ${METADATA} ufds_admin_email)

    REGION_NAME=$(json -f ${METADATA} region_name)
    DATACENTER_NAME=$(json -f ${METADATA} datacenter_name)
    DATACENTER_COMPANY_NAME=$(json -f ${METADATA} datacenter_company_name)
    DATACENTER_LOCATION=$(json -f ${METADATA} datacenter_location)

    UFDS_ADMIN_KEY_FINGERPRINT=$(json -f ${METADATA} ufds_admin_key_fingerprint)
    UFDS_ADMIN_KEY_OPENSSH=$(json -f ${METADATA} ufds_admin_key_openssh)

    ADMIN_NETWORK=$(json -f ${METADATA} admin_network)
    ADMIN_NETMASK=$(json -f ${METADATA} admin_netmask)
    BINDER_ADMIN_IPS=$(json -f ${METADATA} binder_admin_ips)

    VERSION=$(json -f /opt/smartdc/ufds/etc/config.json moray.version)

    IS_MASTER=$(json -f ${METADATA} ufds_is_master)
    if [[ "${IS_MASTER}" == "false" ]]; then
        UFDS_REMOTE_IP=$(json -f ${METADATA} ufds_remote_ip)
        UFDS_REMOTE_PASSWORD=$(json -f ${METADATA} ufds_remote_ldap_root_pw)
        if [[ -z "$UFDS_REMOTE_PASSWORD" ]]; then
            UFDS_REMOTE_PASSWORD="$UFDS_LDAP_ROOT_PW"
        fi
    fi

    if [[ -z "$VERSION" ]]; then
        echo "UFDS config didn't contain a moray version."
        fatal "Moray version not found"
    fi

    if [[ -z "$REGION_NAME" ]]; then
        echo "Metadata region_name is blank.  region_name is necessary for safe"
        echo "data reconciliation."
        fatal "${METADATA} region_name is blank."
    fi
}


function ldap {
    local role=$1
    local cmd=$2
    local ip
    local password
    local cmd

    shift 2

    case "$role" in
    local)
        ip=127.0.0.1
        password=$UFDS_LDAP_ROOT_PW
        ;;
    remote)
        ip=$UFDS_REMOTE_IP
        password=$UFDS_REMOTE_PASSWORD
        ;;
    *)
        printf 'ERROR: unknown LDAP role "%s"\n' "$role" >&2
        exit 1
        ;;
    esac

    case "$cmd" in
    whoami|search|add|delete)
        fullcmd="ldap$cmd"
        ;;
    *)
        printf 'ERROR: unknown LDAP command "%s"\n' "$cmd" >&2
        exit 1
        ;;
    esac

    if [[ $cmd == "whoami" ]]; then
        printf '\tUFDS role "%s" has IP address "%s"\n' "$role" "$ip"
    fi

    LDAP_RESULT=$(LDAPTLS_REQCERT=allow ${fullcmd} -H ldaps://${ip} -x \
        -D ${UFDS_LDAP_ROOT_DN} \
        -w ${password} "$@")
    LDAP_RESULT_CODE=$?
    return $LDAP_RESULT_CODE
}


function verify_a_ufds {
    local role=$1

    printf 'Verifying UFDS for role "%s"...\n' "$role"

    if ! ldap "$role" whoami; then
        printf 'ERROR: failed to contact UFDS for role "%s"\n' "$role" >&2
        exit 1
    fi

    printf '\tUFDS for role "%s" is OK\n' "$role"
}


function verify_ufds {
    verify_a_ufds 'local'
    if [[ "${IS_MASTER}" == "false" ]]; then
        verify_a_ufds 'remote'
    fi
}


# Create the root of the tree
function reconcile_root {
    ldap 'local' search -LLL -s base -b "o=smartdc" \
        'objectclass=organization'
    if [[ ${LDAP_RESULT_CODE} == 32 ]]; then
        echo "Version doesn't exist.  Need to load...."
        local update_file=/var/tmp/ufds-reconcile-version.$$
        cat <<EOF > $update_file
dn: o=smartdc
objectclass: organization
o: smartdc
EOF
        load_ldif $update_file $UFDS_ADMIN_IP
        rm $update_file
    fi
}


# We always need to reconcile the version when we are the master.
function reconcile_version {
    # Slaves only get the version from the master
    if [[ "${IS_MASTER}" == "false" ]]; then
        return
    fi

    # Check for version
    ldap 'local' search -LLL -s base -b "cn=version, o=smartdc" \
        'objectclass=version'

    local update_file=/var/tmp/ufds-reconcile-version.$$
    if [[ ${LDAP_RESULT_CODE} == 32 ]]; then
        echo "Version doesn't exist.  Need to load...."
        cat <<EOF > $update_file
dn: cn=version, o=smartdc
cn: version
o: smartdc
objectclass: version
version: $VERSION
EOF
        load_ldif $update_file $UFDS_ADMIN_IP
        rm $update_file
    else
        CUR_VERSION=$(echo "${LDAP_RESULT}" | grep '^version: ' | \
            sed 's/version: //g')
        if [[ "$VERSION" -gt "$CUR_VERSION" ]]; then
            echo "Updating ufds version..."
            cat <<EOF > $update_file
dn: cn=version, o=smartdc
changetype: modify
replace: version
version: $VERSION
EOF
            load_ldif $update_file $UFDS_ADMIN_IP
            rm $update_file
        fi
    fi
}

# Data needs to be reconciled for one of these reasons:
#  * Expected data is missing from the local ufds.  This indicates that ufds
#    hasn't been bootstrapped.
#  * Expected data missing in the remote ufds indicates that this is the first
#    time this is running since this ufds was made a slave.  Some data should
#    be migrated from local to remote.
function needs_reconcile {
    if [[ "$FORCE_RECONCILE" == "1" ]]; then
        echo "Reconcile forced..."
        return
    fi

    # Expected data is missing from local or remote, depending on master.
    local role='local'
    ldap "$role" search -s base -b "ou=users, o=smartdc" \
        'objectclass=organizationalUnit'
    if [[ ${LDAP_RESULT_CODE} == 32 ]]; then
        echo "ou=users not found in local ufds.  Need to load data..."
        return
    fi

    # Check for datacenter information
    if [[ "${IS_MASTER}" == "false" ]]; then
        role='remote'
    fi
    ldap "$role" search -s base \
        -b "datacenter=${DATACENTER_NAME}, region=${REGION_NAME}, o=smartdc" \
        'objectclass=datacenter'
    if [[ ${LDAP_RESULT_CODE} == 32 ]]; then
        echo "Datacenter information not found in ufds.  Need to load data..."
        return
    fi

    # If we've reached here, we should be OK.  Operator can always override.
    echo "Smoke-tested for the need to reconcile.  Everything should already"
    echo "be in order.  If not, re-run with FORCE_RECONCILE=1."
    exit 0
}


function replace_in_ldif {
    local file=$1
    if [[ ! -f ${file} ]]; then
        fatal "Tried to replace in ${file}, but it doesn't exist."
    fi

    local filename=$(basename ${file})
    LDIF="${LDIF_PREFIX}.${filename}.${X}"
    let "X += 1"
    cp ${file} ${LDIF}
    gsed -i -e "s|UFDS_ADMIN_UUID|$UFDS_ADMIN_UUID|" $LDIF
    gsed -i -e "s|UFDS_ADMIN_LOGIN|$UFDS_ADMIN_LOGIN|" $LDIF
    gsed -i -e "s|UFDS_ADMIN_PW|$UFDS_ADMIN_PW|" $LDIF
    gsed -i -e "s|UFDS_ADMIN_EMAIL|$UFDS_ADMIN_EMAIL|" $LDIF
    gsed -i -e "s|REGION_NAME|$REGION_NAME|" $LDIF
    gsed -i -e "s|DATACENTER_NAME|$DATACENTER_NAME|" $LDIF
    gsed -i -e "s|DATACENTER_COMPANY_NAME|$DATACENTER_COMPANY_NAME|" $LDIF
    gsed -i -e "s|DATACENTER_LOCATION|$DATACENTER_LOCATION|" $LDIF
    gsed -i -e "s|UFDS_ADMIN_KEY_FINGERPRINT|$UFDS_ADMIN_KEY_FINGERPRINT|" $LDIF
    gsed -i -e "s|UFDS_ADMIN_KEY_OPENSSH|$UFDS_ADMIN_KEY_OPENSSH|" $LDIF
    gsed -i -e "s|ADMIN_NETWORK|$ADMIN_NETWORK|" $LDIF
    gsed -i -e "s|ADMIN_NETMASK|$ADMIN_NETMASK|" $LDIF
    gsed -i -e "s|BINDER_ADMIN_IPS|$BINDER_ADMIN_IPS|" $LDIF
}


function load_ldif {
    local ldif=$1
    local role=$2

    if [[ ! -f ${ldif} ]]; then
        fatal "LDIF file ${ldif} doesn't exist"
    fi
    if [[ -z $role ]]; then
        fatal "No UFDS role passed to load_ldif"
    fi

    ldap "$role" add -c -f "$ldif"

    # 68 is "already exists"
    if [[ $LDAP_RESULT_CODE -ne 0 ]] && [[ $LDAP_RESULT_CODE -ne 68 ]]; then
        fatal "Failed to load \"$ldif\" for role \"$role\", exiting"
    fi
}


function migrate_ldap_data {
    local dn=$1
    local tmpFile="${LDIF_PREFIX}.local_ldap_backup.tmp"

    # Backup the tree to an ldif
    ldap 'local' search -o ldif-wrap=no -b "${dn}" >${tmpFile}

    # Purge all the entries in local
    $(dirname "${BASH_SOURCE[0]}")/ufds-find-dns "${dn}" | \
        while read l; do
            ldap 'local' delete "${l}"
        done

    # Add all entries to remote
    load_ldif ${tmpFile} 'remote'

    rm ${tmpFile}
}


function bootstrap_local {
    echo "Reconciling local data"
    replace_in_ldif ${BOOTSTRAP_LDIF_IN}
    # Since this will not error when data already exists, we simply add.  It
    # has the added benefit that new entries will be added too (on force)
    load_ldif ${LDIF} 'local'
}


# TODO: This *may* not end up being sufficent.  If there is something that
# "accidentally" adds a local entry under the "remote" tree, this should
# be the the thing that detects that and migrates the data.  The only way that
# could work is by dumping the tree and checking each entry individually.
function bootstrap_remote {
    echo "Reconciling (possible) remote data"
    replace_in_ldif ${BOOTSTRAP_REMOTE_LDIF_IN}
    local reload_role='local'

    if [[ "${IS_MASTER}" == "false" ]]; then
        # First we need to make sure that data is only in the local ufds if it
        # is already in the remote ufds.  Otherwise, we need to remove from the
        # local ufds before adding to the remote ufds.

        # Use the first dn as a sanity check
        local dn=$(grep '^dn: ' ${LDIF} | head -1 | cut -c 5-)
        ldap 'local' search -s base -b "${dn}" "objectclass=*"
        local in_local=${LDAP_RESULT_CODE}
        ldap 'remote' search -s base -b "${dn}" "objectclass=*"
        local in_remote=${LDAP_RESULT_CODE}

        if [[ ${in_local} == 0 && ${in_remote} == 32 ]]; then
            migrate_ldap_data "${dn}"
        fi
        # We let this load again just in case there are new/more entries
        reload_role='remote'
    fi

    load_ldif ${LDIF} "$reload_role"
}


#---- mainline

setup_vars
verify_ufds
reconcile_root
reconcile_version
needs_reconcile
bootstrap_local
bootstrap_remote
echo "Done with reconciliation."
