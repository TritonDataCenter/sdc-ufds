#!/usr/bin/env node
// -*- mode: js -*-
// Copyright 2011 Joyent, Inc.  All rights reserved.

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;

var ldap = require('ldapjs');
var nopt = require('nopt');
var uuid = require('node-uuid');



///--- Globals

var opts = {
  'admin': Boolean,
  'debug': Number,
  'help': Boolean,
  'keys': Boolean,
  'number': Number,
  'suffix': String,
  'words': String
};

var shortOpts = {
  'a': ['--admin'],
  'd': ['--debug'],
  'h': ['--help'],
  'k': ['--keys'],
  'n': ['--number'],
  's': ['--suffix'],
  'w': ['--words']
};

var words;


///--- Internal Functions

function usage(code, message) {
  var msg = (message ? message + '\n' : '') +
    'usage: ' + path.basename(process.argv[1]) +
    ' [-hdak] [-s suffix] [-n number] [-w words_file]';

  if (code === 0) {
    console.log(msg);
  } else {
    console.error(msg);
  }

  process.exit(code);
}


function writeEntry(dn, obj) {
  console.log('dn: ' + dn);
  console.log('changetype: add');

  Object.keys(obj).forEach(function(k) {
    if (Array.isArray(obj[k])) {
      obj[k].forEach(function(v) {
        console.log(k + ': ' + v);
      });
    } else {
      console.log(k + ': ' + obj[k]);
    }
  });

  console.log();
}

function randomInt(from, to) {
  return Math.floor(Math.random() * (to - from + 1) + from);
}

function randomWord() {
  var index = randomInt(0, words.length - 1);
  return words[index];
}


function randomPassword(length, current){
 current = current ? current : '';
 return length ? randomPassword( --length , "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".charAt( Math.floor( Math.random() * 60 ) ) + current ) : current;
}


function newKey(parentDN, callback) {
  var keyFile = '/tmp/.' + uuid();
  var sshkeygen = spawn('ssh-keygen', ['-f', keyFile,
                                       '-C', randomWord() + '@' + randomWord(),
                                       '-t', 'rsa',
                                       '-b', 1024,
                                       '-N', '']);

  sshkeygen.stderr.on('data', function(data) {
    console.error(data.toString());
  });
  sshkeygen.on('exit', function(code) {
    var rm = spawn('rm', ['-f', keyFile]);

    if (code !== 0) {
      console.error('failed to generate ssh key');
      process.exit(code);
    }
    fs.readFile(keyFile + '.pub', 'utf8', function(err, key) {
      var rm = spawn('rm', ['-f', keyFile + '.pub']);
      if (err) {
        console.error(err.stack);
        process.exit(1);
      }

      var dn = 'name=mysshkey, ' + parentDN;
      return callback(dn, key.replace('\n', ''));
    });
  });
}

///--- Mainline

var parsed = nopt(opts, shortOpts, process.argv, 2);

if (parsed.help)
  usage(0);

if (typeof(parsed.number) !== 'number')
  parsed.number = 100;

if (!parsed.suffix)
  parsed.suffix = 'o=smartdc';

if (!parsed.words)
  parsed.words = '/usr/share/dict/words';

var suffixDN;
try {
  suffixDN = ldap.parseDN(parsed.suffix);
  if (!suffixDN.rdns[0].o)
    usage(1, 'suffix must be o=');

} catch (e) {
  usage(1, parsed.suffix + ' is not a valid DN');
}

try {
  var words = fs.readFileSync(parsed.words, 'utf8').split('\n');
} catch (e) {
  usage(1, 'unable to read ' + parsed.words + ':' + e.toString());
}


/// Write to stdout
console.log('version: 1\n');

writeEntry(parsed.suffix, {
  objectclass: 'organization',
  o: suffixDN.rdns[0].o
});

writeEntry('ou=customers, ' + parsed.suffix, {
  objectclass: 'organizationalUnit',
  ou: 'customers'
});

writeEntry('ou=operators, ' + parsed.suffix, {
  objectclass: 'organizationalUnit',
  ou: 'operators'
});

var _uuid;
if (parsed.admin) {
  _uuid = uuid();
  writeEntry('uuid=' + _uuid + ', ou=operators, ' + parsed.suffix, {
    login: 'admin',
    uuid: _uuid,
    userpassword: 'joypass123',
    email: 'nobody@joyent.com',
    cn: 'root',
    sn: 'user',
    company: 'Joyent',
    address: ['Joyent, Inc.', '345 California Street, Suite 2000'],
    city: 'San Francisco',
    state: 'CA',
    postalCode: 94104,
    country: 'USA',
    phone: '+1 415 400 0600',
    objectclass: 'sdcPerson'
  });
}

for (var i = 0; i < parsed.number; i++) {
  _uuid = uuid();
  var userDN = 'uuid=' + _uuid + ', ou=customers, ' + parsed.suffix;
  writeEntry(userDN, {
    login: randomWord(),
    uuid: _uuid,
    userpassword: randomPassword(6),
    email: randomWord() + '@' + randomWord() + '.com',
    cn: randomWord(),
    sn: randomWord(),
    company: randomWord(),
    address: [randomWord() + ', Inc.',
              randomInt(100, 9999) + ' ' + randomWord() + ' Street'],
    city: randomWord() + ' ' + randomWord(),
    state: randomWord().substr(0, 2).toUpperCase(),
    postalCode: randomInt(01000, 99999),
    country: randomWord().substr(0, 3).toUpperCase(),
    phone: '+1 ' + randomInt(201, 999) + ' ' + randomInt(111, 999) + ' ' +
      randomInt(1000, 9999),
    objectclass: 'sdcPerson'
  });

  if (parsed.keys)
    newKey(userDN, function(dn, key) {
      writeEntry(dn, {
        name: randomWord(),
        openssh: key,
        objectclass: 'sdcKey'
      });
    });

}
