#!/usr/bin/env node
// -*- mode: js -*-
// Copyright 2011 Joyent, Inc.  All rights reserved.

var path = require('path');

var ldap = require('ldapjs');
var log4js = require('log4js');
var nopt = require('nopt');



///--- Globals

var Change = ldap.Change;

nopt.typeDefs.LdapUrl = {
  type: ldap.url,
  validate: function(data, k, val) {
    try {
      if (!ldap.parseURL(val + ''))
        return false;

      data[k] = val;
    } catch (e) {
      return false;
    }
  }
};

var opts = {
  'base': String,
  'binddn': String,
  'debug': Boolean,
  'help': Boolean,
  'passwd': String,
  'url': ldap.url
};

var shortOpts = {
  'D': ['--binddn'],
  'd': ['--debug'],
  'h': ['--help'],
  'u': ['--url'],
  'w': ['--passwd']
};



///--- Internal Functions

function usage(code, message) {
  var _opts = '';
  Object.keys(shortOpts).forEach(function(k) {
    var longOpt = shortOpts[k][0].replace('--', '');
    var type = opts[longOpt].name || 'string';
    if (type && type === 'boolean') type = '';
    type = type.toLowerCase();

    _opts += ' [--' + longOpt + ' ' + type + ']';
  });
  _opts += ' dn attribute value(s)';

  var msg = (message ? message + '\n' : '') +
    'usage: ' + path.basename(process.argv[1]) + _opts;

  process.stderr.write(msg + '\n');
  process.exit(code);
}


function ifError(err) {
  if (!err) return;

  process.stderr.write(err.message + '\n');
  process.exit(1);
}


///--- Mainline

log4js.setGlobalLogLevel('WARN');

var parsed = nopt(opts, shortOpts, process.argv, 2);

if (parsed.help)
  usage(0);

if (!parsed.passwd)
  usage(1, '--passwd required');

if (parsed.argv.remain.length < 3)
  usage(1, 'dn attribute value(s) required');

if (!parsed.binddn)
  parsed.binddn = 'cn=root';

if (!parsed.url)
  parsed.url = 'ldap://localhost';

if (parsed.debug)
  log4js.setGlobalLogLevel('TRACE');

try {
  ldap.parseDN(parsed.argv.remain[0]);
} catch (e) {
  usage(1, 'dn is invalid: ' + e.toString());
}

var client = ldap.createClient({
  url: parsed.url,
  log4js: log4js
});

client.bind(parsed.binddn, parsed.passwd, function(err) {
  ifError(err);

  var mods = {};
  mods[parsed.argv.remain[1]] = parsed.argv.remain.slice(2);
  var change = new Change({
    operation: 'replace',
    modification: mods
  });

  client.modify(parsed.argv.remain[0], change, function(err) {
    ifError(err);

    client.unbind(function(err) {
      ifError(err);
    });
  });
});
